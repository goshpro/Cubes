#include <iostream>
#include <string>

using namespace std;

wstring inputStr;
wstring construct (size_t i, int flags) {
	if(i == inputStr.length ()) {
		return L"";
	} else {
		switch(inputStr[i]) {
		case L'À': case L'à':
			if((flags & (1 << 1)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 1));
				if(wstr != L"0") {
					return L"1-À " + wstr;
				}
			}
			if((flags & (1 << 3)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 3));
				if(wstr != L"0") {
					return L"3-À " + wstr;
				}
			}
			if((flags & (1 << 9)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 9));
				if(wstr != L"0") {
					return L"9-À " + wstr;
				}
			}
			if((flags & (1 << 12)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 12));
				if(wstr != L"0") {
					return L"12-À " + wstr;
				}
			}
			return L"0";
		case L'Á': case L'á':
			if((flags & (1 << 2)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 2));
				if(wstr != L"0") {
					return L"2-Á " + wstr;
				}
			}
			if((flags & (1 << 12)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 12));
				if(wstr != L"0") {
					return L"12-Á " + wstr;
				}
			}
			return L"0";
		case L'Â': case L'â':
			if((flags & (1 << 3)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 3));
				if(wstr != L"0") {
					return L"3-Â " + wstr;
				}
			}
			if((flags & (1 << 8)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 8));
				if(wstr != L"0") {
					return L"8-Â " + wstr;
				}
			}
			return L"0";
		case L'Ã': case L'ã':
			if((flags & (1 << 6)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 6));
				if(wstr != L"0") {
					return L"6-Ã " + wstr;
				}
			}
			if((flags & (1 << 10)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 10));
				if(wstr != L"0") {
					return L"10-Ã " + wstr;
				}
			}
			return L"0";
		case L'Ä': case L'ä':
			if((flags & (1 << 1)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 1));
				if(wstr != L"0") {
					return L"1-Ä " + wstr;
				}
			}
			if((flags & (1 << 5)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 5));
				if(wstr != L"0") {
					return L"5-Ä " + wstr;
				}
			}
			return L"0";
		case L'Å': case L'å':
			if((flags & (1 << 2)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 2));
				if(wstr != L"0") {
					return L"2-Å " + wstr;
				}
			}
			if((flags & (1 << 5)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 5));
				if(wstr != L"0") {
					return L"5-Å " + wstr;
				}
			}
			if((flags & (1 << 10)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 10));
				if(wstr != L"0") {
					return L"10-Å " + wstr;
				}
			}
			if((flags & (1 << 11)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 11));
				if(wstr != L"0") {
					return L"11-Å " + wstr;
				}
			}
			return L"0";
		case L'¨': case L'¸':
			if((flags & (1 << 7)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 7));
				if(wstr != L"0") {
					return L"7-¨ " + wstr;
				}
			}
			if((flags & (1 << 9)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 9));
				if(wstr != L"0") {
					return L"9-¨ " + wstr;
				}
			}
			return L"0";
		case L'Æ': case L'æ':
			if((flags & (1 << 4)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 4));
				if(wstr != L"0") {
					return L"4-Æ " + wstr;
				}
			}
			if((flags & (1 << 11)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 11));
				if(wstr != L"0") {
					return L"11-Æ " + wstr;
				}
			}
			return L"0";
		case L'Ç': case L'ç':
			if((flags & (1 << 2)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 2));
				if(wstr != L"0") {
					return L"2-Ç " + wstr;
				}
			}
			if((flags & (1 << 12)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 12));
				if(wstr != L"0") {
					return L"12-Ç " + wstr;
				}
			}
			return L"0";
		case L'È': case L'è':
			if((flags & (1 << 4)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 4));
				if(wstr != L"0") {
					return L"4-È " + wstr;
				}
			}
			if((flags & (1 << 6)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 6));
				if(wstr != L"0") {
					return L"6-È " + wstr;
				}
			}
			if((flags & (1 << 7)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 7));
				if(wstr != L"0") {
					return L"7-È " + wstr;
				}
			}
			if((flags & (1 << 8)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 8));
				if(wstr != L"0") {
					return L"8-È " + wstr;
				}
			}
			return L"0";
		case L'É': case L'é':
			if((flags & (1 << 1)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 1));
				if(wstr != L"0") {
					return L"1-É " + wstr;
				}
			}
			if((flags & (1 << 5)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 5));
				if(wstr != L"0") {
					return L"5-É " + wstr;
				}
			}
			return L"0";
		case L'Ê': case L'ê':
			if((flags & (1 << 1)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 1));
				if(wstr != L"0") {
					return L"1-Ê " + wstr;
				}
			}
			if((flags & (1 << 5)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 5));
				if(wstr != L"0") {
					return L"5-Ê " + wstr;
				}
			}
			return L"0";
		case L'Ë': case L'ë':
			if((flags & (1 << 3)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 3));
				if(wstr != L"0") {
					return L"3-Ë " + wstr;
				}
			}
			if((flags & (1 << 8)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 8));
				if(wstr != L"0") {
					return L"8-Ë " + wstr;
				}
			}
			return L"0";
		case L'Ì': case L'ì':
			if((flags & (1 << 6)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 6));
				if(wstr != L"0") {
					return L"6-Ì " + wstr;
				}
			}
			if((flags & (1 << 10)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 10));
				if(wstr != L"0") {
					return L"10-Ì " + wstr;
				}
			}
			return L"0";
		case L'Í': case L'í':
			if((flags & (1 << 7)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 7));
				if(wstr != L"0") {
					return L"7-Í " + wstr;
				}
			}
			if((flags & (1 << 9)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 9));
				if(wstr != L"0") {
					return L"9-Í " + wstr;
				}
			}
			return L"0";
		case L'Î': case L'î':
			if((flags & (1 << 1)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 1));
				if(wstr != L"0") {
					return L"1-Î " + wstr;
				}
			}
			if((flags & (1 << 4)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 4));
				if(wstr != L"0") {
					return L"4-Î " + wstr;
				}
			}
			if((flags & (1 << 5)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 5));
				if(wstr != L"0") {
					return L"5-Î " + wstr;
				}
			}
			if((flags & (1 << 7)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 7));
				if(wstr != L"0") {
					return L"7-Î " + wstr;
				}
			}
			return L"0";
		case L'Ï': case L'ï':
			if((flags & (1 << 4)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 4));
				if(wstr != L"0") {
					return L"4-Ï " + wstr;
				}
			}
			if((flags & (1 << 11)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 11));
				if(wstr != L"0") {
					return L"11-Ï " + wstr;
				}
			}
			return L"0";
		case L'Ð': case L'ð':
			if((flags & (1 << 2)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 2));
				if(wstr != L"0") {
					return L"2-Ð " + wstr;
				}
			}
			if((flags & (1 << 12)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 12));
				if(wstr != L"0") {
					return L"12-Ð " + wstr;
				}
			}
			return L"0";
		case L'Ñ': case L'ñ':
			if((flags & (1 << 3)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 3));
				if(wstr != L"0") {
					return L"3-Ñ " + wstr;
				}
			}
			if((flags & (1 << 8)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 8));
				if(wstr != L"0") {
					return L"8-Ñ " + wstr;
				}
			}
			return L"0";
		case L'Ò': case L'ò':
			if((flags & (1 << 6)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 6));
				if(wstr != L"0") {
					return L"6-Ò " + wstr;
				}
			}
			if((flags & (1 << 10)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 10));
				if(wstr != L"0") {
					return L"10-Ò " + wstr;
				}
			}
			return L"0";
		case L'Ó': case L'ó':
			if((flags & (1 << 2)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 2));
				if(wstr != L"0") {
					return L"2-Ó " + wstr;
				}
			}
			if((flags & (1 << 8)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 8));
				if(wstr != L"0") {
					return L"8-Ó " + wstr;
				}
			}
			if((flags & (1 << 9)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 9));
				if(wstr != L"0") {
					return L"9-Ó " + wstr;
				}
			}
			if((flags & (1 << 11)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 11));
				if(wstr != L"0") {
					return L"11-Ó " + wstr;
				}
			}
			return L"0";
		case L'Ô': case L'ô':
			if((flags & (1 << 1)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 1));
				if(wstr != L"0") {
					return L"1-Ô " + wstr;
				}
			}
			if((flags & (1 << 5)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 5));
				if(wstr != L"0") {
					return L"5-Ô " + wstr;
				}
			}
			return L"0";
		case L'Õ': case L'õ':
			if((flags & (1 << 7)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 7));
				if(wstr != L"0") {
					return L"7-Õ " + wstr;
				}
			}
			if((flags & (1 << 9)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 9));
				if(wstr != L"0") {
					return L"9-Õ " + wstr;
				}
			}
			return L"0";
		case L'Ö': case L'ö':
			if((flags & (1 << 4)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 4));
				if(wstr != L"0") {
					return L"4-Ö " + wstr;
				}
			}
			if((flags & (1 << 11)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 11));
				if(wstr != L"0") {
					return L"11-Ö " + wstr;
				}
			}
			return L"0";
		case L'×': case L'÷':
			if((flags & (1 << 2)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 2));
				if(wstr != L"0") {
					return L"2-× " + wstr;
				}
			}
			if((flags & (1 << 12)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 12));
				if(wstr != L"0") {
					return L"12-× " + wstr;
				}
			}
			return L"0";
		case L'Ø': case L'ø':
			if((flags & (1 << 3)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 3));
				if(wstr != L"0") {
					return L"3-Ø " + wstr;
				}
			}
			if((flags & (1 << 8)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 8));
				if(wstr != L"0") {
					return L"8-Ø " + wstr;
				}
			}
			return L"0";
		case L'Ù': case L'ù':
			if((flags & (1 << 6)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 6));
				if(wstr != L"0") {
					return L"6-Ù " + wstr;
				}
			}
			if((flags & (1 << 10)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 10));
				if(wstr != L"0") {
					return L"10-Ù " + wstr;
				}
			}
			return L"0";
		case L'Ú': case L'ú':
			if((flags & (1 << 7)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 7));
				if(wstr != L"0") {
					return L"7-Ú " + wstr;
				}
			}
			return L"0";
		case L'Û': case L'û':
			if((flags & (1 << 9)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 9));
				if(wstr != L"0") {
					return L"9-Û " + wstr;
				}
			}
			return L"0";
		case L'Ü': case L'ü':
			if((flags & (1 << 11)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 11));
				if(wstr != L"0") {
					return L"11-Ü " + wstr;
				}
			}
			return L"0";
		case L'Ý': case L'ý':
			if((flags & (1 << 4)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 4));
				if(wstr != L"0") {
					return L"4-Ý " + wstr;
				}
			}
			return L"0";
		case L'Þ': case L'þ':
			if((flags & (1 << 6)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 6));
				if(wstr != L"0") {
					return L"6-Þ " + wstr;
				}
			}
			if((flags & (1 << 12)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 12));
				if(wstr != L"0") {
					return L"12-Þ " + wstr;
				}
			}
			return L"0";
		case L'ß': case L'ÿ':
			if((flags & (1 << 3)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 3));
				if(wstr != L"0") {
					return L"3-ß " + wstr;
				}
			}
			if((flags & (1 << 10)) == 0) {
				wstring wstr = construct (i + 1, flags | (1 << 10));
				if(wstr != L"0") {
					return L"10-ß " + wstr;
				}
			}
			return L"0";
		default:
			return construct (i + 1, flags);
		}
	}
}

int main () {
	locale loc ("rus_rus.866");
	wcout.imbue (loc);
	wcin.imbue (loc);
	while(true) {
		system ("cls");
		wcout << L"(×òîáû âûéòè èç ïðîãðàììû, íàáåðèòå 'exit'.)\n\n\t\t\t\t 1: Ê Ô À É Î Ä\n\t\t\t\t 2: Ó Å Ç Ð Á ×\n\t\t\t\t 3: Ñ Ë ß À Â Ø\n\t\t\t\t 4: Î Ö Ý Ï Æ È\n\t\t\t\t 5: Ê É Ä Ô Î Å\n\t\t\t\t 6: Ã Ù Ò È Þ Ì\n\t\t\t\t 7: Î È Ú ¨ Õ Í\n\t\t\t\t 8: Â Ñ Ë È Ø Ó\n\t\t\t\t 9: Í Õ Ó À Û ¨\n\t\t\t\t10: Å Ì Ò Ù ß Ã\n\t\t\t\t11: Ö Ü Ï Æ Å Ó\n\t\t\t\t12: À × Ð Ç Á Þ\n\nÂâåäèòå ñëîâî äëÿ ñáîðêè: ";
		getline(wcin, inputStr);
		if(inputStr == L"exit") {
			break;
		}
		wstring outputStr = construct (0, 0);
		if(outputStr == L"") {
			wcout << L"\nÂ ñëåäóþùèé ðàç ââåäèòå ÷òî-íèáóäü íà ðóññêîì ÿçûêå. =/\n\n";
		} else if(outputStr == L"0") {
			wcout << L"\nÒàêîå ñîáðàòü íå ïîëó÷èòñÿ. =(\n\n";
		} else {
			wcout << L"\nÊàê-òî òàê: " << outputStr << L"\n\n";
		}
		system ("pause");
	}
	return 0;
}